To deploy the described AWS infrastructure using Terraform, I will create a set of Terraform scripts organized in a modular structure. Each module will represent a different component of the infrastructure.


Repository Structure:
- terraform
  - modules
    - vpc
    - compute
    - database
    - load_balancer
    - cloudwatch
    - dns
  - main.tf
  - variables.tf
  - outputs.tf
  - terraform.tfvars

Terraform Modules:

1. VPC Module (`modules/vpc`):
   - Creates the VPC, subnets, and route tables according to specified CIDRs.
   - Manages network ACLs and security group rules.

2. Compute Module (`modules/compute`):
   - Defines EC2 instances in Public Subnet 1, WP Subnet 1, and WP Subnet 2.
   - Configures instance types, storage, and security groups.

3. Database Module (`modules/database`):
   - Creates the RDS PostgreSQL database instance in DB Subnet 2.
   - Manages database engine version, size, and security groups.

4. Load Balancer Module (`modules/load_balancer`):
   - Defines the Application Load Balancer (ALB) with listeners and target groups.
   - Configures health checks and security groups.

5. CloudWatch Module (`modules/cloudwatch`):
   - Configures CloudWatch Synthetics for the "Web_Application_Alive" test.
   - Sets up custom metrics and alarms for monitoring.

6. DNS Module (`modules/dns`):
   - Sets up Route53 for domain name resolution.
   - Manages DNS records for the ALB.

I will create a public GitHub repository to host these Terraform scripts for easy access and version control. The repository will include a README file providing instructions for deploying the infrastructure and additional context on each module.

This structured approach helps in maintaining and scaling the infrastructure while providing clear documentation for users.
